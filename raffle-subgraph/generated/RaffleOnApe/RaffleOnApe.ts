// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeUpdated extends ethereum.Event {
  get params(): FeeUpdated__Params {
    return new FeeUpdated__Params(this);
  }
}

export class FeeUpdated__Params {
  _event: FeeUpdated;

  constructor(event: FeeUpdated) {
    this._event = event;
  }

  get newFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NativeVRFUpdated extends ethereum.Event {
  get params(): NativeVRFUpdated__Params {
    return new NativeVRFUpdated__Params(this);
  }
}

export class NativeVRFUpdated__Params {
  _event: NativeVRFUpdated;

  constructor(event: NativeVRFUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizeClaimed extends ethereum.Event {
  get params(): PrizeClaimed__Params {
    return new PrizeClaimed__Params(this);
  }
}

export class PrizeClaimed__Params {
  _event: PrizeClaimed;

  constructor(event: PrizeClaimed) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RaffleCancelled extends ethereum.Event {
  get params(): RaffleCancelled__Params {
    return new RaffleCancelled__Params(this);
  }
}

export class RaffleCancelled__Params {
  _event: RaffleCancelled;

  constructor(event: RaffleCancelled) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RaffleCreated extends ethereum.Event {
  get params(): RaffleCreated__Params {
    return new RaffleCreated__Params(this);
  }
}

export class RaffleCreated__Params {
  _event: RaffleCreated;

  constructor(event: RaffleCreated) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get prizeContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get prizeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RaffleDrawn extends ethereum.Event {
  get params(): RaffleDrawn__Params {
    return new RaffleDrawn__Params(this);
  }
}

export class RaffleDrawn__Params {
  _event: RaffleDrawn;

  constructor(event: RaffleDrawn) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vrfRequestId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RefundAvailable extends ethereum.Event {
  get params(): RefundAvailable__Params {
    return new RefundAvailable__Params(this);
  }
}

export class RefundAvailable__Params {
  _event: RefundAvailable;

  constructor(event: RefundAvailable) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RefundClaimed extends ethereum.Event {
  get params(): RefundClaimed__Params {
    return new RefundClaimed__Params(this);
  }
}

export class RefundClaimed__Params {
  _event: RefundClaimed;

  constructor(event: RefundClaimed) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TicketPurchased extends ethereum.Event {
  get params(): TicketPurchased__Params {
    return new TicketPurchased__Params(this);
  }
}

export class TicketPurchased__Params {
  _event: TicketPurchased;

  constructor(event: TicketPurchased) {
    this._event = event;
  }

  get raffleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RaffleOnApe__getRaffleResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get prizeContract(): Address {
    return this[1].toAddress();
  }

  get paymentToken(): Address {
    return this[2].toAddress();
  }

  get winner(): Address {
    return this[3].toAddress();
  }

  get prizeAmount(): BigInt {
    return this[4].toBigInt();
  }

  get ticketPrice(): BigInt {
    return this[5].toBigInt();
  }

  get prizeTokenId(): BigInt {
    return this[6].toBigInt();
  }

  get maxTicketsPerUser(): BigInt {
    return this[7].toBigInt();
  }

  get totalMaxTickets(): BigInt {
    return this[8].toBigInt();
  }

  get currentTickets(): BigInt {
    return this[9].toBigInt();
  }

  get endTime(): BigInt {
    return this[10].toBigInt();
  }

  get minTicketsNeededToDraw(): BigInt {
    return this[11].toBigInt();
  }

  get prizeType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class RaffleOnApe__getRafflesResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get prizeContract(): Address {
    return this[1].toAddress();
  }

  get paymentToken(): Address {
    return this[2].toAddress();
  }

  get winner(): Address {
    return this[3].toAddress();
  }

  get prizeAmount(): BigInt {
    return this[4].toBigInt();
  }

  get ticketPrice(): BigInt {
    return this[5].toBigInt();
  }

  get prizeTokenId(): BigInt {
    return this[6].toBigInt();
  }

  get maxTicketsPerUser(): BigInt {
    return this[7].toBigInt();
  }

  get totalMaxTickets(): BigInt {
    return this[8].toBigInt();
  }

  get currentTickets(): BigInt {
    return this[9].toBigInt();
  }

  get endTime(): BigInt {
    return this[10].toBigInt();
  }

  get minTicketsNeededToDraw(): BigInt {
    return this[11].toBigInt();
  }

  get prizeType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class RaffleOnApe__getRafflesResult {
  value0: Array<RaffleOnApe__getRafflesResultValue0Struct>;
  value1: BigInt;

  constructor(
    value0: Array<RaffleOnApe__getRafflesResultValue0Struct>,
    value1: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Array<RaffleOnApe__getRafflesResultValue0Struct> {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class RaffleOnApe__rafflesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: i32;
  value13: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: i32,
    value13: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set(
      "value12",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value12)),
    );
    map.set(
      "value13",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value13)),
    );
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getPrizeContract(): Address {
    return this.value1;
  }

  getPaymentToken(): Address {
    return this.value2;
  }

  getWinner(): Address {
    return this.value3;
  }

  getPrizeAmount(): BigInt {
    return this.value4;
  }

  getTicketPrice(): BigInt {
    return this.value5;
  }

  getPrizeTokenId(): BigInt {
    return this.value6;
  }

  getMaxTicketsPerUser(): BigInt {
    return this.value7;
  }

  getTotalMaxTickets(): BigInt {
    return this.value8;
  }

  getCurrentTickets(): BigInt {
    return this.value9;
  }

  getEndTime(): BigInt {
    return this.value10;
  }

  getMinTicketsNeededToDraw(): BigInt {
    return this.value11;
  }

  getPrizeType(): i32 {
    return this.value12;
  }

  getStatus(): i32 {
    return this.value13;
  }
}

export class RaffleOnApe extends ethereum.SmartContract {
  static bind(address: Address): RaffleOnApe {
    return new RaffleOnApe("RaffleOnApe", address);
  }

  createRaffle(
    _prizeType: i32,
    _prizeContract: Address,
    _prizeAmount: BigInt,
    _prizeTokenId: BigInt,
    _paymentToken: Address,
    _ticketPrice: BigInt,
    _maxTicketsPerUser: BigInt,
    _totalMaxTickets: BigInt,
    _minTicketsNeededToDraw: BigInt,
    _duration: BigInt,
  ): BigInt {
    let result = super.call(
      "createRaffle",
      "createRaffle(uint8,address,uint128,uint64,address,uint128,uint32,uint32,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prizeType)),
        ethereum.Value.fromAddress(_prizeContract),
        ethereum.Value.fromUnsignedBigInt(_prizeAmount),
        ethereum.Value.fromUnsignedBigInt(_prizeTokenId),
        ethereum.Value.fromAddress(_paymentToken),
        ethereum.Value.fromUnsignedBigInt(_ticketPrice),
        ethereum.Value.fromUnsignedBigInt(_maxTicketsPerUser),
        ethereum.Value.fromUnsignedBigInt(_totalMaxTickets),
        ethereum.Value.fromUnsignedBigInt(_minTicketsNeededToDraw),
        ethereum.Value.fromUnsignedBigInt(_duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_createRaffle(
    _prizeType: i32,
    _prizeContract: Address,
    _prizeAmount: BigInt,
    _prizeTokenId: BigInt,
    _paymentToken: Address,
    _ticketPrice: BigInt,
    _maxTicketsPerUser: BigInt,
    _totalMaxTickets: BigInt,
    _minTicketsNeededToDraw: BigInt,
    _duration: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createRaffle",
      "createRaffle(uint8,address,uint128,uint64,address,uint128,uint32,uint32,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prizeType)),
        ethereum.Value.fromAddress(_prizeContract),
        ethereum.Value.fromUnsignedBigInt(_prizeAmount),
        ethereum.Value.fromUnsignedBigInt(_prizeTokenId),
        ethereum.Value.fromAddress(_paymentToken),
        ethereum.Value.fromUnsignedBigInt(_ticketPrice),
        ethereum.Value.fromUnsignedBigInt(_maxTicketsPerUser),
        ethereum.Value.fromUnsignedBigInt(_totalMaxTickets),
        ethereum.Value.fromUnsignedBigInt(_minTicketsNeededToDraw),
        ethereum.Value.fromUnsignedBigInt(_duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feePercentage(): BigInt {
    let result = super.call("feePercentage", "feePercentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePercentage",
      "feePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRaffle(_raffleId: BigInt): RaffleOnApe__getRaffleResultValue0Struct {
    let result = super.call(
      "getRaffle",
      "getRaffle(uint256):((address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_raffleId)],
    );

    return changetype<RaffleOnApe__getRaffleResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRaffle(
    _raffleId: BigInt,
  ): ethereum.CallResult<RaffleOnApe__getRaffleResultValue0Struct> {
    let result = super.tryCall(
      "getRaffle",
      "getRaffle(uint256):((address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_raffleId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RaffleOnApe__getRaffleResultValue0Struct>(value[0].toTuple()),
    );
  }

  getRaffleParticipants(_raffleId: BigInt): Array<Address> {
    let result = super.call(
      "getRaffleParticipants",
      "getRaffleParticipants(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_raffleId)],
    );

    return result[0].toAddressArray();
  }

  try_getRaffleParticipants(
    _raffleId: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRaffleParticipants",
      "getRaffleParticipants(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_raffleId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRaffles(_offset: BigInt, _limit: BigInt): RaffleOnApe__getRafflesResult {
    let result = super.call(
      "getRaffles",
      "getRaffles(uint256,uint256):((address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_offset),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );

    return new RaffleOnApe__getRafflesResult(
      result[0].toTupleArray<RaffleOnApe__getRafflesResultValue0Struct>(),
      result[1].toBigInt(),
    );
  }

  try_getRaffles(
    _offset: BigInt,
    _limit: BigInt,
  ): ethereum.CallResult<RaffleOnApe__getRafflesResult> {
    let result = super.tryCall(
      "getRaffles",
      "getRaffles(uint256,uint256):((address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_offset),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RaffleOnApe__getRafflesResult(
        value[0].toTupleArray<RaffleOnApe__getRafflesResultValue0Struct>(),
        value[1].toBigInt(),
      ),
    );
  }

  getRefundAmount(_raffleId: BigInt, _user: Address): BigInt {
    let result = super.call(
      "getRefundAmount",
      "getRefundAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getRefundAmount(
    _raffleId: BigInt,
    _user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRefundAmount",
      "getRefundAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTickets(_raffleId: BigInt, _user: Address): BigInt {
    let result = super.call(
      "getUserTickets",
      "getUserTickets(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserTickets(
    _raffleId: BigInt,
    _user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserTickets",
      "getUserTickets(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRefunded(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "hasRefunded",
      "hasRefunded(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasRefunded(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasRefunded",
      "hasRefunded(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasUserRefunded(_raffleId: BigInt, _user: Address): boolean {
    let result = super.call(
      "hasUserRefunded",
      "hasUserRefunded(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasUserRefunded(
    _raffleId: BigInt,
    _user: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserRefunded",
      "hasUserRefunded(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_raffleId),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nativeVRF(): Address {
    let result = super.call("nativeVRF", "nativeVRF():(address)", []);

    return result[0].toAddress();
  }

  try_nativeVRF(): ethereum.CallResult<Address> {
    let result = super.tryCall("nativeVRF", "nativeVRF():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  raffleCounter(): BigInt {
    let result = super.call("raffleCounter", "raffleCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_raffleCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "raffleCounter",
      "raffleCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  raffleParticipants(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "raffleParticipants",
      "raffleParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_raffleParticipants(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "raffleParticipants",
      "raffleParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  raffleVRFRequests(param0: BigInt): BigInt {
    let result = super.call(
      "raffleVRFRequests",
      "raffleVRFRequests(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_raffleVRFRequests(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "raffleVRFRequests",
      "raffleVRFRequests(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  raffles(param0: BigInt): RaffleOnApe__rafflesResult {
    let result = super.call(
      "raffles",
      "raffles(uint256):(address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new RaffleOnApe__rafflesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toI32(),
      result[13].toI32(),
    );
  }

  try_raffles(param0: BigInt): ethereum.CallResult<RaffleOnApe__rafflesResult> {
    let result = super.tryCall(
      "raffles",
      "raffles(uint256):(address,address,address,address,uint128,uint128,uint64,uint32,uint32,uint32,uint32,uint32,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RaffleOnApe__rafflesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toI32(),
        value[13].toI32(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userTickets(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "userTickets",
      "userTickets(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userTickets(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTickets",
      "userTickets(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nativeVRF(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyTicketsCall extends ethereum.Call {
  get inputs(): BuyTicketsCall__Inputs {
    return new BuyTicketsCall__Inputs(this);
  }

  get outputs(): BuyTicketsCall__Outputs {
    return new BuyTicketsCall__Outputs(this);
  }
}

export class BuyTicketsCall__Inputs {
  _call: BuyTicketsCall;

  constructor(call: BuyTicketsCall) {
    this._call = call;
  }

  get _raffleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyTicketsCall__Outputs {
  _call: BuyTicketsCall;

  constructor(call: BuyTicketsCall) {
    this._call = call;
  }
}

export class CancelRaffleCall extends ethereum.Call {
  get inputs(): CancelRaffleCall__Inputs {
    return new CancelRaffleCall__Inputs(this);
  }

  get outputs(): CancelRaffleCall__Outputs {
    return new CancelRaffleCall__Outputs(this);
  }
}

export class CancelRaffleCall__Inputs {
  _call: CancelRaffleCall;

  constructor(call: CancelRaffleCall) {
    this._call = call;
  }

  get _raffleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelRaffleCall__Outputs {
  _call: CancelRaffleCall;

  constructor(call: CancelRaffleCall) {
    this._call = call;
  }
}

export class ClaimRefundCall extends ethereum.Call {
  get inputs(): ClaimRefundCall__Inputs {
    return new ClaimRefundCall__Inputs(this);
  }

  get outputs(): ClaimRefundCall__Outputs {
    return new ClaimRefundCall__Outputs(this);
  }
}

export class ClaimRefundCall__Inputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }

  get _raffleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRefundCall__Outputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }
}

export class CreateRaffleCall extends ethereum.Call {
  get inputs(): CreateRaffleCall__Inputs {
    return new CreateRaffleCall__Inputs(this);
  }

  get outputs(): CreateRaffleCall__Outputs {
    return new CreateRaffleCall__Outputs(this);
  }
}

export class CreateRaffleCall__Inputs {
  _call: CreateRaffleCall;

  constructor(call: CreateRaffleCall) {
    this._call = call;
  }

  get _prizeType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _prizeContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _prizeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _prizeTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _ticketPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxTicketsPerUser(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _totalMaxTickets(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minTicketsNeededToDraw(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class CreateRaffleCall__Outputs {
  _call: CreateRaffleCall;

  constructor(call: CreateRaffleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DrawRaffleCall extends ethereum.Call {
  get inputs(): DrawRaffleCall__Inputs {
    return new DrawRaffleCall__Inputs(this);
  }

  get outputs(): DrawRaffleCall__Outputs {
    return new DrawRaffleCall__Outputs(this);
  }
}

export class DrawRaffleCall__Inputs {
  _call: DrawRaffleCall;

  constructor(call: DrawRaffleCall) {
    this._call = call;
  }

  get _raffleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrawRaffleCall__Outputs {
  _call: DrawRaffleCall;

  constructor(call: DrawRaffleCall) {
    this._call = call;
  }
}

export class FinalizeRaffleCall extends ethereum.Call {
  get inputs(): FinalizeRaffleCall__Inputs {
    return new FinalizeRaffleCall__Inputs(this);
  }

  get outputs(): FinalizeRaffleCall__Outputs {
    return new FinalizeRaffleCall__Outputs(this);
  }
}

export class FinalizeRaffleCall__Inputs {
  _call: FinalizeRaffleCall;

  constructor(call: FinalizeRaffleCall) {
    this._call = call;
  }

  get _raffleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeRaffleCall__Outputs {
  _call: FinalizeRaffleCall;

  constructor(call: FinalizeRaffleCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeePercentageCall extends ethereum.Call {
  get inputs(): UpdateFeePercentageCall__Inputs {
    return new UpdateFeePercentageCall__Inputs(this);
  }

  get outputs(): UpdateFeePercentageCall__Outputs {
    return new UpdateFeePercentageCall__Outputs(this);
  }
}

export class UpdateFeePercentageCall__Inputs {
  _call: UpdateFeePercentageCall;

  constructor(call: UpdateFeePercentageCall) {
    this._call = call;
  }

  get _newFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeePercentageCall__Outputs {
  _call: UpdateFeePercentageCall;

  constructor(call: UpdateFeePercentageCall) {
    this._call = call;
  }
}

export class UpdateNativeVRFCall extends ethereum.Call {
  get inputs(): UpdateNativeVRFCall__Inputs {
    return new UpdateNativeVRFCall__Inputs(this);
  }

  get outputs(): UpdateNativeVRFCall__Outputs {
    return new UpdateNativeVRFCall__Outputs(this);
  }
}

export class UpdateNativeVRFCall__Inputs {
  _call: UpdateNativeVRFCall;

  constructor(call: UpdateNativeVRFCall) {
    this._call = call;
  }

  get _newNativeVRF(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateNativeVRFCall__Outputs {
  _call: UpdateNativeVRFCall;

  constructor(call: UpdateNativeVRFCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
